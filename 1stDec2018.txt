**********************
Windows PowerShell transcript start
Start time: 20181201121323
Username: NTMS_PC8\Administrator
RunAs User: NTMS_PC8\Administrator
Machine: NTMS_PC8 (Microsoft Windows NT 6.3.9600.0)
Host Application: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
Process ID: 960
**********************
Transcript started, output file is 1stDec2018.txt

PS C:\Users\Administrator> PS C:\Users\Administrator> Get-help about_regular* -ShowWindow
>> TerminatingError(Get-Process): "A positional parameter cannot be found that accepts argument 'Get-help'."
Get-Process : A positional parameter cannot be found that accepts argument 'Get-help'.
At line:1 char:1
+ PS C:\Users\Administrator> Get-help about_regular* -ShowWindow
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidArgument: (:) [Get-Process], ParameterBindingException
    + FullyQualifiedErrorId : PositionalParameterNotFound,Microsoft.PowerShell.Commands.GetProcessCommand


PS C:\Users\Administrator> Get-help about_regular* -ShowWindow

PS C:\Users\Administrator> get-help Get-Date

NAME
    Get-Date

SYNOPSIS
    Gets the current date and time.


SYNTAX
    Get-Date [[-Date] <DateTime>] [-Day <Int32>] [-DisplayHint <DisplayHintType>] [-Format <String>] [-Hour <Int32>]
    [-Millisecond <Int32>] [-Minute <Int32>] [-Month <Int32>] [-Second <Int32>] [-Year <Int32>] [<CommonParameters>]

    Get-Date [[-Date] <DateTime>] [-Day <Int32>] [-DisplayHint <DisplayHintType>] [-Hour <Int32>] [-Millisecond
    <Int32>] [-Minute <Int32>] [-Month <Int32>] [-Second <Int32>] [-UFormat <String>] [-Year <Int32>]
    [<CommonParameters>]


DESCRIPTION
    The Get-Date cmdlet gets a DateTime object that represents the current date or a date that you specify. It can
    format the date and time in several Windows and UNIX formats. You can use Get-Date to generate a date or time
    character string, and then send the string to other cmdlets or programs.


RELATED LINKS
    Online Version: http://go.microsoft.com/fwlink/p/?linkid=293966
    New-TimeSpan
    Set-Date

REMARKS
    To see the examples, type: "get-help Get-Date -examples".
    For more information, type: "get-help Get-Date -detailed".
    For technical information, type: "get-help Get-Date -full".
    For online help, type: "get-help Get-Date -online"




PS C:\Users\Administrator> get-help Get-Date -Examples

NAME
    Get-Date

SYNOPSIS
    Gets the current date and time.

    -------------------------- EXAMPLE 1 --------------------------

    PS C:\>Get-Date -DisplayHint Date
    Tuesday, June 13, 2006


    This command gets a DateTime object, but it displays only the date. It uses the DisplayHint parameter to indicate
    that only the date is to be displayed.
    -------------------------- EXAMPLE 2 --------------------------

    PS C:\>Get-Date -Format g
    6/13/2006 12:43 PM


    This command gets the current date and time and formats it in short-date and short-time format. It uses the .NET
    Framework "g" format specifier (General [short date and short time]) to specify the format.
    -------------------------- EXAMPLE 3 --------------------------

    PS C:\>Get-Date -UFormat "%Y / %m / %d / %A / %Z"
    2006 / 06 / 13 / Tuesday / -07


    This command gets the current date and time and formats it as specified by the command. In this case, the format
    includes the full year (%Y), the two-digit numeric month (%m), the date (%d), the full day of the week (%A), and
    the offset from UTC ("Zulu").
    -------------------------- EXAMPLE 4 --------------------------

    PS C:\>(Get-Date -Year 2000 -Month 12 -Day 31).DayOfYear
    366


    This command displays the day of the year for the current date. For example, December 31 is the 365th day of 2006,
    but it is the 366th day of 2000.
    -------------------------- EXAMPLE 5 --------------------------

    PS C:\>$a = Get-Date
    PS C:\>$a.IsDaylightSavingTime()
    True


    These commands tell you whether the current date and time are adjusted for daylight savings time in the current
    locale.

    The first command creates a variable named $a and then assigns the object retrieved by Get-Date to the $a
    variable. Then, it uses the IsDaylightSavingTime method on the object in $a.

    To see the properties and methods of the DateTime object, type:

    "Get-Date | get-member".
    -------------------------- EXAMPLE 6 --------------------------

    PS C:\>$a = Get-Date
    PS C:\>$a.ToUniversalTime()
    Tuesday, June 13, 2006 8:09:19 PM


    These commands convert the current date and time to UTC time.

    The first command creates a variable named $a and then assigns the object retrieved by Get-Date to the $a
    variable. Then, it uses the ToUniversalTime method on the object in $a.
    -------------------------- EXAMPLE 7 --------------------------

    PS C:\>$a = Get-WmiObject Win32_Bios -Computer Server01
    PS C:\>$a | Format-List -Property Name, @{Label="BIOS Age";Expression={(Get-Date) -
    $_.ConvertToDateTime($_.ReleaseDate)}}
    Name     : Default System BIOS
    BIOS Age : 1345.17:31:07.1091047


    Windows Management Instrumentation (WMI) uses a different date-time object than the .NET Framework date-time
    object that Get-Date returns. To use date-time information from WMI in a command with date-time information from
    Get-Date, you have to use the ConvertToDateTime method to convert WMI CIM_DATETIME objects to .NET Framework
    DateTime objects.

    The commands in this example display the name and age of the BIOS on a remote computer, Server01.

    The first command uses the Get-WmiObject cmdlet to get an instance of the Win32_BIOS class on Server01 and then
    stores it in the $a variable.

    The second command uses the pipeline operator (|) to send the WMI object stored in $a to the Format-List cmdlet.
    The Property parameter of Format-List specifies two properties to display in the list, "Name" and "BIOS Age". The
    "BIOS Age" property is specified in a hash table. The table includes the Label key, which specifies the name of
    the property, and the Expression key, which contains the expression that calculates the BIOS age. The expression
    uses the ConvertToDateTime method to convert each instance of ReleaseDate to a .NET Framework DateTime object.
    Then, the value is subtracted from the value of the Get-Date cmdlet, which, without parameters, gets the current
    date.

    The backtick character (`) is the line continuation character in Windows PowerShell.
    -------------------------- EXAMPLE 8 --------------------------

    PS C:\>Get-Date
    Tuesday, June 13, 2006 12:43:42 PM


    This command gets a DateTime object and displays the current date and time in the long date and long time formats
    for the system locale, as though you typed "Get-Date -Format F".
    -------------------------- EXAMPLE 9 --------------------------

    PS C:\>Get-Date
    Tuesday, September 26, 2006 11:25:31 AM

    PS C:\>(Get-Date).ToString()
    9/26/2006 11:25:31 AM

    PS C:\>Get-Date | Add-Content Test.txt

    # Adds 9/26/2006 11:25:31 AM

    PS C:\>Get-Date -Format F | Add-Content Test.txt

    # Adds Tuesday, September 26, 2006 11:25:31 AM


    These commands demonstrate how to use Get-Date with Add-Content and other cmdlets that convert the DateTime object
    that Get-Date generates to a string.

    The first command shows that the default display from a "Get-Date" command is in long-date and long-time format.

    The second command shows that the default display from the ToString() method of the DateTime object is in
    short-date and short-time format.

    The third command uses a pipeline operator to send the DateTime object to the Add-Content cmdlet, which adds the
    content to the Test.txt file. Because Add-Content uses the ToString() method of the DateTime object, the date that
    is added is in short-date and short-time format.

    The fourth command uses the Format parameter of Get-Date to specify the format. When you use the Format or UFormat
    parameters, Get-Date generates a string, not a DateTime object. Then, when you send the string to Add-Content, it
    adds the string to the Test.txt file without changing it.
    -------------------------- EXAMPLE 10 --------------------------

    The first command uses the Format parameter with a value of "o" to generate a timestamp string.
    PS C:\>Get-Date -Format o
    2012-03-08T10:55:55.6083839-08:00

    The second command prepares the timestamp to be used in a directory name. The command replaces the colon
    characters (:) in the string with dots (.) and saves the result in the $timestamp variable. Replacing the colons
    prevents the characters that precede each colon from being interpreted as a drive name.
    PS C:\>$timestamp = Get-Date -Format o | foreach {$_ -replace ":", "."}

    The third command uses the Mkdir function to create a directory with the name in the $timestamp variable.
    PS C:\>mkdir C:\ps-test\$timestamp
        Directory: C:\ps-test

    Mode                LastWriteTime     Length Name
    ----                -------------     ------ ----
    d----          3/8/2012  11:01 AM            2012-03-08T11.00.24.4192623-08.00


    This example shows how to use the Get-Date cmdlet to create a timestamp and how to use the timestamp in or as part
    of a directory name.


$input=Get-Content -path "C:\Users\Administrator\a.txt"
Get-Member -InputObject 
$input[0]

$input=Get-Content -path "C:\Users\Administrator\a.txt"


foreach($onesentence on $input)
{
If($onesentence -match  "error")

{
Write-Host "The Error exit in file"
}

}

"e" -match "[a-d]"

"aa" -match "[a-dw]"
"a" -match "^[a-d]$"
"aa" -match "^[a-d]$"
"aa" -match "^[a-de]$"
"a" -match "^[a-de]$"
"z" -match "^[a-de]$"
"a" -match "^[a-dn]$"
"an" -match "^[a-dn]$"
"aa" -match "^[a-dn]{2}$"
"an" -match "^[a-dn]{2}$"
"abda" -match "^[b-da]{4}$"
"abd" -match "^[b-da]{3,4}$"
"abd" -match "^[b-da]{0,2}$"
"zx" -match "^[b-da]{0,2}$"
"a" -match "^[^b-da]{1,3}$"
"a" -match "^[z-pa]{1,2}$"
"bac" -match "^[abc]{3}$"
"bac" -match "^[a-d]{3,5}[-}$"
"bac" -match "^[a-d]{3,5}[-/}$"
"aba" -match "^[a-d]{3,5}[-}$"
"abc-/" -match "^[a-d]{3,5}[-/}?$"
"b" -match "^\w?$"
"ab" -match "^\w?$"
"01" -match "^\w?$"
"1" -match "^\w?$"
"a" -match "^\w$"
"" -match "^\w$"
"a" -match "^\w\w$"
"1" -match "^\d\d$"
"a1" -match "[0-9]$"
"1a" -match "[0-9]$"
"9z" -match "[0-9]$"
"7" -match "^[0-56]$"
"51" -match "^[0-5][12]$"
"340" -match "^[0-1][345]$"
"340" -match "^[0-1][345]$"
"43" -match "^[0-1]?[345]$"
"69" -match "^[0-1]|[345]$"
=======================


"02-11-80" -match "^0?[1-9]$"
"10"      -match "^1[0-9]$"
"10"      -match "^2[0-9]$"
"30"      -match "^3[0-1]$"

"30" -match "^(0?[0-9]|[12][0-9]|3[0-1])$"
"12" -match "^(0?[1-9]|[12][0-2])$"
"02-11-80" -match "^(0?[0-9]|[12][0-9]|3[0-1])[-](0?[1-9]|[12][0-2])[-]\d\d$"
"02-11-2018" -match "^(0?[0-9]|[12][0-9]|3[0-1])[-](0?[1-9]|[12][0-2])[-]\d\d$"
"30-11-2018" -match "^(0?[0-9]|[12][0-9]|3[0-1])[-](0?[1-9]|[12][0-2])[-]\d\d$"




$cred=Get-Credential

$username="raju"
$Password="12@qwaszx" | ConvertTo-SecureString -AsPlainText -Force
$cred=New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $username,$password


$username="raju"
$Password="12@qwaszx" | ConvertTo-SecureString -AsPlainText -Force
$pass=$password | ConvertFrom-SecureString 
$pass | Out-File pass.txt

$passw=Get-Content .\pass.txt | ConvertTo-SecureString
username="raje"
$Password="12@qwaszx" | ConvertTo-SecureString -AsPlainText -Force
$cred=New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $username,$password

$passw=Get-Content .\pass.txt | ConvertTo-SecureString
username="raje"
$pass | ConvertTo-SecureString -AsPlainText -Force
$cred=New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $username,$pass

New-Item -ItemType file -path "C:\Users\Administrator\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1" -Force
ii $profile



$Hastable=@{

fname="Raju"
lname="kadam"
}

$Object=New-Object Pscustomobject -Property $Hastable


$Object
